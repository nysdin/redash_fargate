name: CICD Pipeline

run-name: ${{ github.workflow }} / triggered on ${{ github.ref_name }}/${{ github.sha }}

permissions:
  id-token: write
  contents: write
  pull-requests: write
  actions: read

on:
  pull_request:
    types:
      - closed
    branches:
      - main

concurrency:
  group: prod-deploy
  cancel-in-progress: false

jobs:
  filter:
    runs-on: ubuntu-latest
    outputs:
      paths: ${{ steps.filter.outputs.paths }}
    permissions:
      pull-requests: read
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v3.0.2
        id: filter
        with:
          filters: |
            paths:
              - '!cloudformation/**'
  pre-notification:
    needs: [filter]
    runs-on: ubuntu-latest
    if: |
      github.event.pull_request.merged == true &&
      !contains(github.event.pull_request.labels.*.name, 'release_version_incremental') &&
      needs.filter.outputs.paths == 'true'
    steps:
      - name: Notify Deployment Start
        run: echo "Notify Deployment Start"

  release-version-increment:
    needs: [filter]
    outputs:
      sha: ${{ steps.sha.outputs.sha }}
    if: |
      github.event.pull_request.merged == true &&
      !contains(github.event.pull_request.labels.*.name, 'release_version_incremental') &&
      needs.filter.outputs.paths == 'true'
    runs-on: ubuntu-latest
    steps:
      - id: sha
        run: echo "sha=${{ github.sha }}" >> $GITHUB_OUTPUT

  build:
    runs-on: ubuntu-latest
    needs: [filter, release-version-increment]
    if: |
      github.event.pull_request.merged == true &&
      !contains(github.event.pull_request.labels.*.name, 'release_version_incremental') &&
      always()
    steps:
      - run: echo ${{ needs.release-version-increment.outputs.sha || 'fallback' }}
      - run: echo test

  ci-check:
    if: |
      github.event.pull_request.merged == true &&
      !contains(github.event.pull_request.labels.*.name, 'release_version_incremental') &&
      always()
    needs: [release-version-increment, build]
    runs-on: ubuntu-latest
    steps:
      - if: ${{ needs.build.result != 'success' }}
        run: echo "Failed!!!!"

  call-ecs-deploy-workflow:
    needs: [filter, release-version-increment, build, ci-check]
    if: |
      github.event.pull_request.merged == true &&
      !contains(github.event.pull_request.labels.*.name, 'release_version_incremental') &&
      needs.filter.outputs.paths == 'true'
    runs-on: ubuntu-latest
    steps:
      - run: echo Deploy

  post-notification:
    runs-on: ubuntu-latest
    needs:
      [
        filter,
        release-version-increment,
        build,
        ci-check,
        call-ecs-deploy-workflow,
      ]
    if: |
      github.event.pull_request.merged == true &&
      !contains(github.event.pull_request.labels.*.name, 'release_version_incremental') &&
      needs.filter.outputs.paths == 'true' &&
      always()
    steps:
      - run: echo Notify Deployment Finish
